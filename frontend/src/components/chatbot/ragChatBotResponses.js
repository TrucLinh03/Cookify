// RAG-powered chat bot responses for Cookify
import axios from 'axios';
import { getChatbotUrl } from '../../config/api.js';

// Configuration
const RAG_API_BASE_URL = getChatbotUrl();
const FALLBACK_ENABLED = true;

// Create axios instance with default config
const ragApi = axios.create({
  baseURL: RAG_API_BASE_URL,
  timeout: 10000, // Reduce timeout to 10 seconds for better UX
  headers: {
    'Content-Type': 'application/json',
  },
});

// Add request interceptor for debugging
ragApi.interceptors.request.use(
  (config) => {
    console.log(`ü§ñ Chatbot API Request: ${config.method?.toUpperCase()} ${config.baseURL}${config.url}`);
    return config;
  },
  (error) => {
    console.error('‚ùå Chatbot Request Error:', error);
    return Promise.reject(error);
  }
);

// Add response interceptor for better error handling
ragApi.interceptors.response.use(
  (response) => {
    console.log(`‚úÖ Chatbot API Response: ${response.status}`);
    return response;
  },
  (error) => {
    console.error('‚ùå Chatbot API Error:', error.response?.status, error.message);
    return Promise.reject(error);
  }
);

// Fallback responses for when RAG API is unavailable
const fallbackResponses = {
  greeting: [
    'Xin ch√†o! T√¥i l√† Chef AI Assistant c·ªßa Cookify. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m c√¥ng th·ª©c n·∫•u ƒÉn v√† t∆∞ v·∫•n m√≥n ƒÉn. H√¥m nay b·∫°n mu·ªën n·∫•u g√¨? üòä',
    'Ch√†o b·∫°n! T√¥i s·∫µn s√†ng h·ªó tr·ª£ b·∫°n v·ªÅ n·∫•u ƒÉn. B·∫°n c·∫ßn t∆∞ v·∫•n m√≥n g√¨ kh√¥ng? üë®‚Äçüç≥',
    'Hello! T√¥i l√† tr·ª£ l√Ω ·∫£o chuy√™n v·ªÅ n·∫•u ƒÉn. H√£y cho t√¥i bi·∫øt b·∫°n mu·ªën n·∫•u m√≥n g√¨ nh√©! üç≥'
  ],
  error: [
    'Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t nh√©! üòÖ',
    'H·ªá th·ªëng ƒëang b·∫£o tr√¨. T√¥i s·∫Ω quay l·∫°i h·ªó tr·ª£ b·∫°n s·ªõm th√¥i! üîß',
    'ƒêang c√≥ l·ªói x·∫£y ra. B·∫°n c√≥ th·ªÉ th·ª≠ h·ªèi l·∫°i kh√¥ng? ü§î'
  ],
  default: [
    'T√¥i hi·ªÉu b·∫°n mu·ªën t√¨m hi·ªÉu v·ªÅ m√≥n ƒÉn n√†y! H√£y cho t√¥i bi·∫øt c·ª• th·ªÉ h∆°n v·ªÅ nguy√™n li·ªáu b·∫°n c√≥ ho·∫∑c lo·∫°i m√≥n b·∫°n mu·ªën n·∫•u nh√©. üòä',
    'B·∫°n c√≥ th·ªÉ m√¥ t·∫£ r√µ h∆°n v·ªÅ m√≥n ƒÉn b·∫°n mu·ªën kh√¥ng? T√¥i s·∫Ω t∆∞ v·∫•n c√¥ng th·ª©c ph√π h·ª£p! üë©‚Äçüç≥',
    'H√£y cho t√¥i bi·∫øt th√™m chi ti·∫øt ƒë·ªÉ t√¥i c√≥ th·ªÉ g·ª£i √Ω m√≥n ƒÉn ngon cho b·∫°n! üçΩÔ∏è'
  ]
};

// Check if RAG API is available
const checkRagApiHealth = async () => {
  try {
    const response = await ragApi.get('/health', { timeout: 3000 });
    return response.status === 200;
  } catch (error) {
    console.warn('RAG API health check failed:', error.message);
    return false;
  }
};

// Get random response from array
const getRandomResponse = (responses) => {
  return responses[Math.floor(Math.random() * responses.length)];
};

// Detect greeting messages
const isGreeting = (message) => {
  const greetingKeywords = ['xin ch√†o', 'hello', 'hi', 'ch√†o', 'hey'];
  const lowerMessage = message.toLowerCase();
  return greetingKeywords.some(keyword => lowerMessage.includes(keyword));
};

// Generate fallback response based on message content
const generateFallbackResponse = (userMessage) => {
  const lowerMessage = userMessage.toLowerCase();
  
  if (isGreeting(lowerMessage)) {
    return {
      text: getRandomResponse(fallbackResponses.greeting),
      suggestions: ['M√≥n nhanh 30 ph√∫t', 'M√≥n cho gia ƒë√¨nh', 'M·∫πo n·∫•u ƒÉn', 'T∆∞ v·∫•n nguy√™n li·ªáu'],
      source: 'fallback_greeting'
    };
  }
  
  // Check for specific cooking terms
  if (lowerMessage.includes('ph·ªü') || lowerMessage.includes('pho')) {
    return {
      text: 'Ph·ªü l√† m√≥n ƒÉn truy·ªÅn th·ªëng tuy·ªát v·ªùi! üçú\n\n**Ph·ªü B√≤ c∆° b·∫£n:**\n- X∆∞∆°ng b√≤: 1kg\n- Th·ªãt b√≤: 500g\n- B√°nh ph·ªü: 400g\n- H√†nh t√¢y, g·ª´ng, th·∫£o qu·∫£\n\n**C√°ch l√†m:**\n1. Ninh x∆∞∆°ng 3-4 ti·∫øng\n2. N∆∞·ªõng h√†nh, g·ª´ng cho th∆°m\n3. Gia v·ªã: mu·ªëi, ƒë∆∞·ªùng, n∆∞·ªõc m·∫Øm\n4. Tr·ª•ng b√°nh ph·ªü, x·∫øp th·ªãt, chan n∆∞·ªõc d√πng\n\nB·∫°n c·∫ßn h∆∞·ªõng d·∫´n chi ti·∫øt h∆°n kh√¥ng? üòä',
      suggestions: ['Ph·ªü b√≤', 'Ph·ªü g√†', 'C√°ch n·∫•u n∆∞·ªõc d√πng ph·ªü'],
      source: 'fallback_recipe'
    };
  }
  
  if (lowerMessage.includes('nhanh') || lowerMessage.includes('30 ph√∫t')) {
    return {
      text: 'T√¥i g·ª£i √Ω m·ªôt s·ªë m√≥n nhanh: M√¨ x√†o gi√≤n (20 ph√∫t), C∆°m chi√™n d∆∞∆°ng ch√¢u (15 ph√∫t), ho·∫∑c B√∫n th·ªãt n∆∞·ªõng (25 ph√∫t). B·∫°n ch·ªçn m√≥n n√†o? ‚ö°',
      suggestions: ['M√¨ x√†o gi√≤n', 'C∆°m chi√™n d∆∞∆°ng ch√¢u', 'B√∫n th·ªãt n∆∞·ªõng'],
      source: 'fallback_quick'
    };
  }

  if (lowerMessage.includes('c∆°m chi√™n')) {
    return {
      text: 'üçö **C∆°m Chi√™n D∆∞∆°ng Ch√¢u:**\n\n**Nguy√™n li·ªáu:**\n- C∆°m ngu·ªôi: 2 b√°t\n- Tr·ª©ng: 2 qu·∫£\n- X√∫c x√≠ch: 100g\n- T√¥m kh√¥: 50g\n- H√†nh t√¢y, t·ªèi\n\n**C√°ch l√†m:**\n1. ƒê√°nh tr·ª©ng, chi√™n t∆°i\n2. Phi th∆°m h√†nh t·ªèi\n3. Cho c∆°m v√†o x√†o\n4. Th√™m x√∫c x√≠ch, t√¥m kh√¥\n5. N√™m n·∫øm v·ª´a ƒÉn\n\nM√≥n n√†y r·∫•t d·ªÖ l√†m v√† ngon! üòã',
      suggestions: ['C∆°m chi√™n h·∫£i s·∫£n', 'C∆°m chi√™n th·∫≠p c·∫©m', 'M·∫πo chi√™n c∆°m ngon'],
      source: 'fallback_recipe'
    };
  }

  if (lowerMessage.includes('b√°nh m√¨')) {
    return {
      text: 'ü•ñ **B√°nh M√¨ Vi·ªát Nam:**\n\n**Nguy√™n li·ªáu:**\n- B√°nh m√¨: 2 ·ªï\n- Pate gan: 100g\n- Th·ªãt ngu·ªôi: 100g\n- Rau th∆°m, d∆∞a chua\n- T∆∞∆°ng ·ªõt, mayonnaise\n\n**C√°ch l√†m:**\n1. N∆∞·ªõng b√°nh m√¨ gi√≤n\n2. Ph·∫øt pate v√† mayonnaise\n3. Th√™m th·ªãt ngu·ªôi\n4. Rau th∆°m, d∆∞a chua\n5. Ch·∫•m t∆∞∆°ng ·ªõt\n\nB√°nh m√¨ Vi·ªát Nam n·ªïi ti·∫øng th·∫ø gi·ªõi! üåç',
      suggestions: ['B√°nh m√¨ th·ªãt n∆∞·ªõng', 'B√°nh m√¨ ch·∫£ c√°', 'C√°ch l√†m d∆∞a chua'],
      source: 'fallback_recipe'
    };
  }

  if (lowerMessage.includes('b√∫n b√≤') || lowerMessage.includes('b√∫n b√≤ hu·∫ø')) {
    return {
      text: 'üçú **B√∫n B√≤ Hu·∫ø:**\n\n**Nguy√™n li·ªáu:**\n- B√∫n b√≤: 500g\n- X∆∞∆°ng heo: 500g\n- Th·ªãt b√≤: 300g\n- Ch·∫£ cua: 200g\n- M·∫Øm ru·ªëc, sa t·∫ø\n\n**C√°ch l√†m:**\n1. Ninh x∆∞∆°ng 2-3 ti·∫øng\n2. Th√™m m·∫Øm ru·ªëc, sa t·∫ø\n3. Lu·ªôc b√∫n qua n∆∞·ªõc s√¥i\n4. Th√°i th·ªãt b√≤, ch·∫£ cua\n5. Tr√¨nh b√†y v√† th∆∞·ªüng th·ª©c\n\nM√≥n ƒë·∫∑c s·∫£n x·ª© Hu·∫ø! üëë',
      suggestions: ['B√∫n b√≤ Hu·∫ø cay', 'C√°ch l√†m sa t·∫ø', 'M·∫Øm ru·ªëc t√¥m'],
      source: 'fallback_recipe'
    };
  }

  if (lowerMessage.includes('g·ªèi cu·ªën') || lowerMessage.includes('nem cu·ªën')) {
    return {
      text: 'ü•¨ **G·ªèi Cu·ªën T√¥m Th·ªãt:**\n\n**Nguy√™n li·ªáu:**\n- B√°nh tr√°ng: 20 t·ªù\n- T√¥m lu·ªôc: 300g\n- Th·ªãt ba ch·ªâ: 200g\n- Rau s·ªëng, b√∫n t∆∞∆°i\n- N∆∞·ªõc ch·∫•m chua ng·ªçt\n\n**C√°ch l√†m:**\n1. Lu·ªôc t√¥m, th·ªãt ch√≠n\n2. Chu·∫©n b·ªã rau s·ªëng\n3. ∆Ø·ªõt b√°nh tr√°ng\n4. Cu·ªën t√¥m, th·ªãt, rau\n5. Ch·∫•m n∆∞·ªõc m·∫Øm chua ng·ªçt\n\nM√≥n ƒÉn nh·∫π, healthy! ü•ó',
      suggestions: ['G·ªèi cu·ªën chay', 'N∆∞·ªõc ch·∫•m g·ªèi cu·ªën', 'B√°nh tr√°ng cu·ªën'],
      source: 'fallback_recipe'
    };
  }
  
  return {
    text: getRandomResponse(fallbackResponses.default),
    suggestions: ['M√≥n nhanh', 'M√≥n ch√≠nh', 'Tr√°ng mi·ªáng', 'ƒê·ªì u·ªëng'],
    source: 'fallback_default'
  };
};

// Main function to get RAG-powered chat response
export const getRagChatBotResponse = async (userMessage, conversationId = null) => {
  try {
    console.log('Processing RAG query:', userMessage);
    
    // Temporarily use fallback while fixing CORS issues
    if (FALLBACK_ENABLED) {
      console.log('üîß Using fallback responses while fixing CORS issues');
      return generateFallbackResponse(userMessage);
    }
    
    // Check if RAG API is available
    const isRagAvailable = await checkRagApiHealth();
    
    if (!isRagAvailable && FALLBACK_ENABLED) {
      console.warn('RAG API unavailable, using fallback responses');
      return generateFallbackResponse(userMessage);
    }
    
    if (!isRagAvailable) {
      throw new Error('RAG API is not available and fallback is disabled');
    }
    
    // Call Node.js Chatbot API (new format)
    const requestData = {
      message: userMessage.trim(),
      user_id: null, // Can be set from user context if available
      conversation_id: conversationId
    };
    
    console.log('Calling Node.js Chatbot API with:', requestData);
    
    const response = await ragApi.post('/ask', requestData);
    const ragResponse = response.data;
    
    console.log('Node.js Chatbot API response:', {
      confidence: ragResponse.confidence,
      sourcesCount: ragResponse.sources?.length || 0,
      processingTime: ragResponse.processing_time_ms
    });
    
    // Extract suggestions from sources (recipe names, blog titles, etc.)
    const suggestions = ragResponse.sources?.slice(0, 4).map(s => s.name) || [];
    
    // Format response for frontend
    return {
      text: ragResponse.response,
      suggestions: suggestions,
      source: 'node_chatbot',
      score: ragResponse.confidence?.score || 0,
      confidence: ragResponse.confidence,
      retrievedDocs: ragResponse.sources || [],
      conversationId: ragResponse.conversation_id,
      ragResponse: true
    };
    
  } catch (error) {
    console.error('RAG API error:', error);
    
    // Always use fallback when there's an error
    if (FALLBACK_ENABLED) {
      console.warn('API error occurred, using fallback response');
      return generateFallbackResponse(userMessage);
    }
    
    // Handle specific error types for better user experience
    if (error.code === 'ECONNREFUSED' || error.code === 'ENOTFOUND') {
      console.warn('Connection failed, using fallback');
      if (FALLBACK_ENABLED) {
        return generateFallbackResponse(userMessage);
      }
    }
    
    if (error.response?.status === 400) {
      return {
        text: 'Xin l·ªói, c√¢u h·ªèi c·ªßa b·∫°n kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i v·ªõi c√¢u h·ªèi kh√°c! üòÖ',
        suggestions: ['Th·ª≠ c√¢u h·ªèi kh√°c', 'M√≥n ƒÉn ph·ªï bi·∫øn', 'M·∫πo n·∫•u ƒÉn'],
        source: 'error_validation'
      };
    }
    
    if (error.response?.status >= 500) {
      return {
        text: getRandomResponse(fallbackResponses.error),
        suggestions: ['Th·ª≠ l·∫°i', 'H·ªèi c√¢u kh√°c', 'Li√™n h·ªá h·ªó tr·ª£'],
        source: 'error_server'
      };
    }
    
    // Generic error fallback
    if (FALLBACK_ENABLED) {
      return generateFallbackResponse(userMessage);
    }
    
    throw error;
  }
};

// Legacy function for backward compatibility
export const getChatBotResponse = async (userMessage) => {
  return await getRagChatBotResponse(userMessage);
};

// Get random welcome message
export const getRandomWelcomeMessage = () => {
  const welcomeMessages = [
    'Xin ch√†o! T√¥i l√† Chef AI Assistant v·ªõi c√¥ng ngh·ªá RAG m·ªõi. H√¥m nay b·∫°n mu·ªën n·∫•u m√≥n g√¨ nh·ªâ? üë®‚Äçüç≥',
    'Ch√†o b·∫°n! T√¥i ƒë√£ ƒë∆∞·ª£c n√¢ng c·∫•p v·ªõi AI th√¥ng minh h∆°n. T√¥i c√≥ th·ªÉ t∆∞ v·∫•n m√≥n ƒÉn v√† m·∫πo n·∫•u ƒÉn cho b·∫°n! üç≥',
    'Hello! T√¥i l√† Chef AI Assistant phi√™n b·∫£n m·ªõi v·ªõi kh·∫£ nƒÉng hi·ªÉu v√† t∆∞ v·∫•n t·ªët h∆°n. B·∫Øt ƒë·∫ßu n·∫•u ƒÉn th√¥i! üë©‚Äçüç≥',
    'Ch√†o m·ª´ng ƒë·∫øn v·ªõi Cookify! T√¥i ƒë√£ ƒë∆∞·ª£c n√¢ng c·∫•p AI ƒë·ªÉ h·ªó tr·ª£ b·∫°n n·∫•u ƒÉn t·ªët h∆°n. H√£y h·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨! üî•'
  ];
  
  return welcomeMessages[Math.floor(Math.random() * welcomeMessages.length)];
};

// Utility functions for debugging
export const getRagApiStatus = async () => {
  try {
    const healthResponse = await ragApi.get('/health');
    
    return {
      healthy: healthResponse.status === 200 && healthResponse.data.status === 'healthy',
      health: healthResponse.data,
      mongodb_connected: healthResponse.data.mongodb?.connected,
      database: healthResponse.data.mongodb?.database,
      models: healthResponse.data.models
    };
  } catch (error) {
    return {
      healthy: false,
      error: error.message
    };
  }
};

// Test RAG API with sample queries
export const testRagApi = async () => {
  const testQueries = [
    'Xin ch√†o',
    'L√†m sao ƒë·ªÉ c∆°m kh√¥ng b·ªã nh√£o?',
    'T√¥i mu·ªën n·∫•u ph·ªü b√≤',
    'M√≥n ƒÉn nhanh 30 ph√∫t'
  ];
  
  const results = [];
  
  for (const query of testQueries) {
    try {
      const response = await getRagChatBotResponse(query);
      results.push({
        query,
        success: true,
        response: {
          source: response.source,
          score: response.score,
          hasAnswer: !!response.text,
          suggestionCount: response.suggestions?.length || 0
        }
      });
    } catch (error) {
      results.push({
        query,
        success: false,
        error: error.message
      });
    }
  }
  
  return results;
};
